/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  HTTPValidationError,
  SetCreate,
  SetRead
} from './fastAPI.schemas'
import { customInstance } from '../../Axios';
import type { ErrorType } from '../../Axios';




/**
 * Route to get all sets.
 * @summary Get Sets
 */
export const getSets = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<SetRead[]>(
      {url: `/api/set/`, method: 'GET', signal
    },
      );
    }
  

export const getGetSetsQueryKey = () => {
    return [`/api/set/`] as const;
    }

    
export const getGetSetsQueryOptions = <TData = Awaited<ReturnType<typeof getSets>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSets>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSetsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSets>>> = ({ signal }) => getSets(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSets>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetSetsQueryResult = NonNullable<Awaited<ReturnType<typeof getSets>>>
export type GetSetsQueryError = ErrorType<void>


export function useGetSets<TData = Awaited<ReturnType<typeof getSets>>, TError = ErrorType<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSets>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSets<TData = Awaited<ReturnType<typeof getSets>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSets>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getSets>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetSets<TData = Awaited<ReturnType<typeof getSets>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Sets
 */

export function useGetSets<TData = Awaited<ReturnType<typeof getSets>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getSets>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetSetsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Route to create a new set.
 * @summary Create Set
 */
export const createSet = (
    setCreate: SetCreate,
 signal?: AbortSignal
) => {
      
      
      return customInstance<SetRead>(
      {url: `/api/set/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: setCreate, signal
    },
      );
    }
  


export const getCreateSetMutationOptions = <TData = Awaited<ReturnType<typeof createSet>>, TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: SetCreate}, TContext>, }
) => {
const mutationKey = ['createSet'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createSet>>, {data: SetCreate}> = (props) => {
          const {data} = props ?? {};

          return  createSet(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: SetCreate}, TContext>}

    export type CreateSetMutationResult = NonNullable<Awaited<ReturnType<typeof createSet>>>
    export type CreateSetMutationBody = SetCreate
    export type CreateSetMutationError = ErrorType<void | HTTPValidationError>

    /**
 * @summary Create Set
 */
export const useCreateSet = <TData = Awaited<ReturnType<typeof createSet>>, TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: SetCreate}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: SetCreate},
        TContext
      > => {

      const mutationOptions = getCreateSetMutationOptions(options);

      return useMutation(mutationOptions);
    }
    
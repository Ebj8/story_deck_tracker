/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CollectionCounts,
  CollectionCreate,
  CollectionRead,
  CollectionSimpleRead,
  CollectionUpdate,
  HTTPValidationError
} from './fastAPI.schemas'
import { customInstance } from '../../Axios';
import type { ErrorType } from '../../Axios';




/**
 * Route to update a user's collection row.
 * @summary Update Collection Row
 */
export const updateCollectionRow = (
    collectionUpdate: CollectionUpdate,
 ) => {
      
      
      return customInstance<CollectionSimpleRead>(
      {url: `/api/collection/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: collectionUpdate
    },
      );
    }
  


export const getUpdateCollectionRowMutationOptions = <TData = Awaited<ReturnType<typeof updateCollectionRow>>, TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CollectionUpdate}, TContext>, }
) => {
const mutationKey = ['updateCollectionRow'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCollectionRow>>, {data: CollectionUpdate}> = (props) => {
          const {data} = props ?? {};

          return  updateCollectionRow(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: CollectionUpdate}, TContext>}

    export type UpdateCollectionRowMutationResult = NonNullable<Awaited<ReturnType<typeof updateCollectionRow>>>
    export type UpdateCollectionRowMutationBody = CollectionUpdate
    export type UpdateCollectionRowMutationError = ErrorType<void | HTTPValidationError>

    /**
 * @summary Update Collection Row
 */
export const useUpdateCollectionRow = <TData = Awaited<ReturnType<typeof updateCollectionRow>>, TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CollectionUpdate}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: CollectionUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateCollectionRowMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Route to create a new entry into a user's collection.
 * @summary Create Collection Row
 */
export const createCollectionRow = (
    collectionCreate: CollectionCreate,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CollectionSimpleRead>(
      {url: `/api/collection/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: collectionCreate, signal
    },
      );
    }
  


export const getCreateCollectionRowMutationOptions = <TData = Awaited<ReturnType<typeof createCollectionRow>>, TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CollectionCreate}, TContext>, }
) => {
const mutationKey = ['createCollectionRow'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createCollectionRow>>, {data: CollectionCreate}> = (props) => {
          const {data} = props ?? {};

          return  createCollectionRow(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: CollectionCreate}, TContext>}

    export type CreateCollectionRowMutationResult = NonNullable<Awaited<ReturnType<typeof createCollectionRow>>>
    export type CreateCollectionRowMutationBody = CollectionCreate
    export type CreateCollectionRowMutationError = ErrorType<void | HTTPValidationError>

    /**
 * @summary Create Collection Row
 */
export const useCreateCollectionRow = <TData = Awaited<ReturnType<typeof createCollectionRow>>, TError = ErrorType<void | HTTPValidationError>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: CollectionCreate}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: CollectionCreate},
        TContext
      > => {

      const mutationOptions = getCreateCollectionRowMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Route to get a user's entire collection.
 * @summary Get Collection
 */
export const getCollection = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CollectionRead[]>(
      {url: `/api/collection/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCollectionQueryKey = (userId: string,) => {
    return [`/api/collection/${userId}`] as const;
    }

    
export const getGetCollectionQueryOptions = <TData = Awaited<ReturnType<typeof getCollection>>, TError = ErrorType<void | HTTPValidationError>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCollectionQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollection>>> = ({ signal }) => getCollection(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCollectionQueryResult = NonNullable<Awaited<ReturnType<typeof getCollection>>>
export type GetCollectionQueryError = ErrorType<void | HTTPValidationError>


export function useGetCollection<TData = Awaited<ReturnType<typeof getCollection>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollection>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCollection<TData = Awaited<ReturnType<typeof getCollection>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollection>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCollection<TData = Awaited<ReturnType<typeof getCollection>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Collection
 */

export function useGetCollection<TData = Awaited<ReturnType<typeof getCollection>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollection>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCollectionQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Route to get the total count of each card in a user's collection.

The values returned are grouped on the card_id, is_foil, and condition columns.
 * @summary Get Collection Count
 */
export const getCollectionCount = (
    userId: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CollectionCounts[]>(
      {url: `/api/collection/count/${userId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCollectionCountQueryKey = (userId: string,) => {
    return [`/api/collection/count/${userId}`] as const;
    }

    
export const getGetCollectionCountQueryOptions = <TData = Awaited<ReturnType<typeof getCollectionCount>>, TError = ErrorType<void | HTTPValidationError>>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCount>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCollectionCountQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollectionCount>>> = ({ signal }) => getCollectionCount(userId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCollectionCount>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCollectionCountQueryResult = NonNullable<Awaited<ReturnType<typeof getCollectionCount>>>
export type GetCollectionCountQueryError = ErrorType<void | HTTPValidationError>


export function useGetCollectionCount<TData = Awaited<ReturnType<typeof getCollectionCount>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCount>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollectionCount>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCollectionCount<TData = Awaited<ReturnType<typeof getCollectionCount>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCount>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollectionCount>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCollectionCount<TData = Awaited<ReturnType<typeof getCollectionCount>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCount>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Collection Count
 */

export function useGetCollectionCount<TData = Awaited<ReturnType<typeof getCollectionCount>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCount>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCollectionCountQueryOptions(userId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Route to get a specific row in a user's collection.
 * @summary Get Collection Card
 */
export const getCollectionCard = (
    userId: string,
    cardId: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<CollectionRead[]>(
      {url: `/api/collection/${userId}/${cardId}`, method: 'GET', signal
    },
      );
    }
  

export const getGetCollectionCardQueryKey = (userId: string,
    cardId: number,) => {
    return [`/api/collection/${userId}/${cardId}`] as const;
    }

    
export const getGetCollectionCardQueryOptions = <TData = Awaited<ReturnType<typeof getCollectionCard>>, TError = ErrorType<void | HTTPValidationError>>(userId: string,
    cardId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCard>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCollectionCardQueryKey(userId,cardId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCollectionCard>>> = ({ signal }) => getCollectionCard(userId,cardId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId && cardId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCollectionCard>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCollectionCardQueryResult = NonNullable<Awaited<ReturnType<typeof getCollectionCard>>>
export type GetCollectionCardQueryError = ErrorType<void | HTTPValidationError>


export function useGetCollectionCard<TData = Awaited<ReturnType<typeof getCollectionCard>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string,
    cardId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCard>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollectionCard>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCollectionCard<TData = Awaited<ReturnType<typeof getCollectionCard>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string,
    cardId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCard>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCollectionCard>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCollectionCard<TData = Awaited<ReturnType<typeof getCollectionCard>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string,
    cardId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCard>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Collection Card
 */

export function useGetCollectionCard<TData = Awaited<ReturnType<typeof getCollectionCard>>, TError = ErrorType<void | HTTPValidationError>>(
 userId: string,
    cardId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCollectionCard>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCollectionCardQueryOptions(userId,cardId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



